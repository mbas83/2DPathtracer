#pragma once

#include "../../shared/framework/framework.h"

// create a uniform buffer
// 1. declare the struct
struct ComposeUniform
{
	int N;
	// number of samples (monte carlo)
	float exposure;
	// scaling brightness
};


///
/// \brief draw result by dividing each pixel by n
/// 
/// \param tex Texture that contains the sum
/// \param n number of iterations
/// \param exposure for adjusting brightness
/// \param compose_program shader program for drawing the result (compose shader)
static void render_result(gpupro::Texture& tex, int n, float exposure, gpupro::Program& compose_program)
{
	//create buffer for 'n' (number of samples)
	gpupro::Buffer<ComposeUniform> uniformBuffer(gpupro::BufferType::UNIFORM, /*number of elements*/ 1);
	ComposeUniform bufferData{ n, exposure };
	uniformBuffer.subDataUpdate(bufferData); // upload buffer data to GPU
	// 
	//vao is needed, but a vbo is not
	gpupro::VertexArray vao;
	vao.bind();

	//bind texture that contains the summed sample values
	tex.bindAsTexture(0);
	uniformBuffer.bindAsUniformBuffer(1); // bind uniform buffer to shader binding index
	compose_program.bind();

	//draw with 4 vertices, positions are generated by vertex shader (glVertexId)
	glDrawArrays(GL_TRIANGLES, 0, 3);
}
